#!/usr/bin/env python3
"""
poisson_chisq_gv

Does a chisq check on 3D poisson G_V data

Assumes N=10000 and rho=1 when computing finite size effect

Usage: poisson_chisq_gv [options] file

Options:
    -h, --help -> Print this message
    -d [dimension] -> Set dimension of script, default = 3
    -c [cutoff] -> Only use the first [cutoff] data points, default = 10
    -l [lower_cutoff] -> displace "beginning" of file, default = 0
    -b -> Assume we are given a block file as input
    -i -> Turn of finite size effect estimation
"""

import sys
import numpy as np

def sphere_vol(dim, r):
    if dim == 1:
        return 2.0*r
    elif dim == 2:
        return np.pi*r*r
    elif dim == 3:
        return 4.0*np.pi*r*r*r/3.0
    else:
        print("Dimension not implemented", file=sys.stderr)
        sys.exit(-1)

def g_finite_size(dim, r):
    return 10000.0/(10000.0 - sphere_vol(dim, r))

if __name__ == "__main__":
    dim = 3
    cutoff = 10
    lower_cutoff = 0
    is_block = False
    assume_infinite = False
    if "-h" in sys.argv or "--help" in sys.argv:
        print(__doc__)
        sys.exit()
    if "-d" in sys.argv:
        idx = sys.argv.index("-d")
        sys.argv.pop(idx)
        dim = int(sys.argv.pop(idx))
    if "-c" in sys.argv:
        idx = sys.argv.index("-c")
        sys.argv.pop(idx)
        cutoff = int(sys.argv.pop(idx))
    if "-l" in sys.argv:
        idx = sys.argv.index("-l")
        sys.argv.pop(idx)
        lower_cutoff = int(sys.argv.pop(idx))
    if "-b" in sys.argv:
        is_block = True
        sys.argv.remove("-b")
    if "-i" in sys.argv:
        assume_infinite = True
        sys.argv.remove("-i")
    
    infile = open(sys.argv[1])

    indata = np.loadtxt(infile)

    domain = indata[lower_cutoff:lower_cutoff+cutoff,0]
    if is_block:
        g = indata[lower_cutoff:lower_cutoff+cutoff,1]
        g_unc = indata[lower_cutoff:lower_cutoff+cutoff,2]
    else:
        g = indata[lower_cutoff:lower_cutoff+cutoff,8]
        g_unc = indata[lower_cutoff:lower_cutoff+cutoff,9]

    g_hat = g - g_finite_size(dim, domain)
    if assume_infinite:
        g_hat = g - 1.0
    chisq = np.sum(g_hat*g_hat/(g_unc*g_unc))
    red_chisq = chisq/float(len(g_hat))

    print("chisq = {}".format(chisq))
    print("red_chisq = {}".format(red_chisq))
